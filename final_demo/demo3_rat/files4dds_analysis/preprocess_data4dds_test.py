#this script is used to generate data for DMR vs. expressiondata
import os
import pandas as pd
import glob 

#13. exported dmr regions for test
#mr_data_folder='results_out_trimed/out_5mc_mar22/DMR_CpG_context/'
#full_mr_file=os.path.join( mr_data_folder, '23_chroms_high_miniPercentChange_gt_0.0001_Pcutoff_0.05_isSmooth_2_isModTest_0__all_dmrRanking_top_0.56_minLogReg_proba_0.7.bed')

mr_data_folder='../../../final_demo_data/rat_data/out_data/DMR_CpG_context/'
full_mr_file=os.path.join( mr_data_folder, '5_chroms_all_mr_data_range_dmrRanking.bed')
print('Read:')
print(full_mr_file)

out_result_folder='../../../final_demo_data/rat_data/out_data/DMR_CpG_context'

in_genome_folder='../../../final_demo_data/genome'
enhancer_file=os.path.join( in_genome_folder , 'rn6/rn6.enhancers_all_rn5_merged_rn6liftOvered_4dmr.bed')
tss_file=os.path.join(mr_data_folder , 'data/TSS_Up5000_Down1000_removedShort.bed')
print(tss_file)

#find mr not located in either enhacner or tss
# For randomly selected MRs , we first remove MRs in  TSS and enhancers from the two methylation files
out_file=os.path.join(out_result_folder, 'mr_regions_not_in_enhancers.bed')
os.system('bedtools intersect -a ' + full_mr_file + ' -b ' + enhancer_file + \
                  ' -v > ' + out_file)
out_file2mr_not_in_enhancer_tss=out_file.replace('.bed','_tss.bed')
os.system('bedtools intersect -a ' + out_file + ' -b ' + tss_file + \
          ' -v > ' + out_file2mr_not_in_enhancer_tss )
os.system('rm -f ' + out_file)
print('Export:')
print('\t', out_file2mr_not_in_enhancer_tss)

#input file generated by find_DEG_in_tss_5dist_regions_test.py"
in_file=os.path.join(out_result_folder, 'dmr_regions_in_deg_tss_5dist_rat.bed')
in_df=pd.read_csv(in_file,sep='\t',header=None)
print('Read: ')
print(in_file)

#14. find unique dmr located in tss and 5dist regions of DEG
out_df=in_df.groupby([0,1,2,3])[5].apply(';'.join).reset_index().copy()
out_file=in_file.replace('dmr_','uqdmr_')
out_df.to_csv(out_file,sep='\t',header=False,index=False)
print('Export: ')
#shall be removed ??
print('\t',out_file)

#14b. find unique gene dmrs in tss and 5dist regions of DEG
in_df['mr_site']=in_df[3].apply(lambda x: ':'.join(x.split(':')[0:2]))
in_df['gene_type']=in_df[5].apply(lambda x: x.split('||')[1])

out_df2=in_df.groupby([6,'gene_type'])['mr_site'].apply('~'.join).reset_index().copy()
out_df2.columns=['gene_name','gene_type','new_mr_sites']
out_file2=in_file.replace('dmr_','uqGeneDmr_')
out_df2.to_csv(out_file2,sep='\t',index=False)
#shall be removed ??
print(out_file2)

#find tss overlapping only DMRs
out_file3=out_file2.replace('_5dist_','_')
cmd='grep TSS ' + out_file2 + '  > ' + out_file3
os.system(cmd)
print(out_file3)
#add column name
out_df=pd.read_csv(out_file3,sep='\t',header=None)
out_columns=['gene_name','gene_type','new_mr_sites']
out_df.columns=out_columns
out_df.to_csv(out_file3, sep='\t',index=False)

#find 5dist overlapping to enhancers
out_file3=in_file.replace('_tss_','_')
cmd='grep 5dist ' + in_file + '  > ' + out_file3
os.system(cmd)
#shall be removed ??
#print(out_file3)

out_file4=out_file3.replace('_rat','_rat_overlap_enhancer')
cmd2='bedtools intersect -a '+ out_file3 + \
       ' -b ' + in_genome_folder + '/rn6/rn6.enhancers_all_rn5_merged_rn6liftOvered_4dmr.bed -wa -wb ' + \
       '  > ' + out_file4
os.system(cmd2)
#shall be removed ??
#print(out_file4)

in_file2=out_file4
#in_file2='dmr_regions_in_deg_5dist_rat_overlap_enhancer.bed'
in_df2=pd.read_csv(in_file2,sep='\t',header=None)
in_df2['mr_site']=in_df2[3].apply(lambda x: ':'.join(x.split(':')[0:2]))
in_df2['gene_type']=in_df2[5].apply(lambda x: x.split('||')[1])
out_df2=in_df2.groupby([6,'gene_type'])['mr_site'].apply('~'.join).reset_index().copy()
out_df2.columns=out_columns
out_file5=in_file2.replace('dmr_','uqGeneDmr_')
out_df2.to_csv(out_file5,sep='\t',index=False)
#here new_mr_sites was changed manually to block_id for doing chromSegment_test4blocks 
print(out_file5)

print('Remove: ')
print('\n', out_file2,'\n', out_file3,'\n', out_file4)
os.system('rm -f ' + out_file2)
os.system('rm -f ' + out_file3)
os.system('rm -f ' + out_file4)


#uqdmr_regions_in_deg_tss_5dist.bed
#convert bpb3 diffExp to tab delimiter format 
in_file='../../../final_demo_data/rat_data/in_data/DEG/Adrenal1vsAdrenal2_DEG_genes_zscores.tsv'
in_df=pd.read_csv(in_file,sep='\t')
columns=in_df.columns.to_list()
new_columns=[]
for ci in columns:
   if 'gene' in ci:
       ci='gene'
   else:
       tmps=ci.split('_')[0:2]
       if int(tmps[1])<=10:
          ci='_'.join(['Methylation']+tmps+['Test'])
       else:
          ci='_'.join(['Methylation']+tmps+['Ctrl'])
   new_columns.append(ci)

out_df=in_df.copy()
out_df.columns=new_columns
out_file=in_file.replace('.tsv','_tab.tsv')
out_df.to_csv(out_file, sep='\t',index=False)
print('Export exp file:')
print(out_file)







